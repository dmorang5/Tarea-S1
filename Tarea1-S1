from math import sqrt

class Ejercicios:
    def __init__(self,titulo):
        self.mensaje = titulo

#Tipos de datos

#¿De cuál tipo de dato sería la variable donde almacena lo siguiente?
#“Hola Mundo"
#Verdadero
# „1'
#„c'
# 256
# 8>19"""
    def ejercicio1(self):
        print("\tTipos de datos")
        print("\n")
        print("""
        1)“Hola Mundo"       3)„1'       5)256
        2) Verdadero         4)„c'       6)8>19
         """)
        opcion = input("-Elija una opcion :")
        if opcion == "1":
            print("El tipo de dato (Hola mundo) es de tipo de dato STRING")
        elif opcion == "2":
            print("El tipo de datos de Verdadero es de tipo booleano")
        elif opcion == "3":
            print("El tipo de datos de ,1 es de tipo de dato decimal (float)")
        elif opcion == "4":
            print("El tipo de datos de ,c es de tipo Caracter (chr)")
        elif opcion == "5":
            print("El tipo de datos de 256 es de tipo entero (int)")
        elif opcion == "6":
            print("El tipo de datos de (8>19) es FALSO y es de tipo booleano")
        else:
            print("Opción no válida, por favor seleccione una opcion corecta")

#¿Siguiendo la prioridad de operadores, convierta a expresión matemática,
#resuelva e indique en cuál tipo de variable almacenará el resultado de las
#siguientes expresiones:
# (5 + 3 * 2) + 9 > 3 * 5 * 14 % 3
# 2 *(4 – 10 + 8)/2* 36 *(1/2)
# 260 / 12 + 54 % 3 – 85 % 7
#(48 < 2 * 3) | | (2 * 7 < 12)
# ((8 > 2) | | (932 < 23) ) && 4 == 2
    
    def ejercicio2(self):
        print("\n")
        print("""
        1)(5 + 3 * 2) + 9 > 3 * 5 * 14 % 3      
        2)2 (4 - 10 + 8)/2 36 *(1/2)    
        3)260 / 12 + 54 % 3 - 85 % 7  
        4)(48 < 2 * 3) | | (2 * 7 < 12)         
        5)((8 > 2) | | (932 < 23) ) && 4 == 2""")
        literal = input("-Elija un literal :")
        if literal == "1":
            print("El resultado de esta operacion es 20>0 y cumpliendo su funcion se determina que es verdadera y es de tipo boolena ")
        elif literal == "2":
            print("El resultado de esta operacion es 36 y es un dato entero (int)")
        elif literal == "3":
            print("El resultado de esta operacion es 60,66 y es un dato decimal (float)")
        elif literal == "4":
            print("El tipo de datos de esta ecuacion se determina FALSA y es de tipo booleana")
        elif literal == "5":
            print("El tipo de datos de esta ecuacion se determina FALSA y es de tipo booleana")
        else:
            print("Opción no válida, por favor seleccione una opcion correcta")

#Dados dos (2) números calcule la suma, resta, multiplicación, división y módulo.    
    def ejercicio4(self):
        print("\n")
        print("Ingrese el primer número: ")
        num1 = int (input())
        print("Ingrese otro número: ")
        num2 = int (input())
        
        suma = num1 + num2
        resta = num1 - num2
        multi = num1 * num2
        divi = num1 / num2
        modu = num1 % num2
        
        print("La suma es:",suma)
        print("La resta es:",resta)
        print("La multiplicación es:",multi)
        print("La división es:",divi)
        print("El módulo es:",modu)
    
#Dados tres (3) números, Hacer una aplicación que calcule la resolvente.    
    def ejercicio5(self):
        from math import sqrt
        print("\n")
        num1 = int(input("Ingrese el primer número: \n"))
        num2 = int(input("Ingrese el segundo número: \n"))
        num3 = int(input("Ingrese el tercer número: \n"))
        x1 = 0
        x2 = 0

        if ((num2 ** 2) - 4 * num1 * num3) < 0:
            print("La solución de la ecuación es con números complejos")
        else:
            x1 = (-num2 + sqrt(num2 ** 2 - (4 * num1 * num3))) / (2 * num1)
            x2 = (-num2 - sqrt(num2 ** 2 - (4 * num1 * num3))) / (2 * num1)
        print("Las soluciones son:")
        print("El valor de x1 es:",x1)
        print("El valor de x2 es:",x2)

#Dados dos (2) lados de un triángulo en cm, calcular la hipotenusa del mismo.
    def ejercicio6 (self):
        import math
        print("\n")
        cat1 = int(input("Ingrese un cateto del triángulo: \n "))
        cat2 = int(input("Ingrese el otro catedo del triángulo: \n"))

        hipo = sqrt((cat1 * cat1 + cat2 * cat2))
        print("La hipotenusa es:", hipo)

#Dado un (1) número, imprimir 0 si es par y 1 si es impar. 
    def ejercicio7 (self):
        print("\n")
        numero = 0
        numero = int(input("Indique un número: \n"))

        if (numero % 2) == 0:
            print(" 0 = par ")
        else:
             print(" 1 = impar ")

#Dado un (1) número binario de cuatro (4) dígitos imprimir su bit da paridad. El bit
# de paridad es 1 si el número de bits 1 es impar y 0 en caso contrario.
    def ejercicio9 (self):
        print("\n")
        suma, extnum = 0, 0
        nbin = int(input("Ingrese un numero binario de (4) cuatro dígitos: "))
        while nbin != 0:
            extnum = nbin % 10
            nbin //= 10
            suma += extnum
        if suma % 2 == 0:
            print("El bit de paridad de", suma, "es 0")
        else:
            print("El bit de paridad de", suma, "es 1")

#Dado un (1) número binario de cuatro (4) dígitos imprimir su valor
    def ejercicio10 (self):
        print("\n")
        nbin = input('Ingrese el número binario de (4) dígitos a convertir:')
        valor = int(nbin, 2)
        print('La conversión de binario a decimal es:', valor)  

#Dado un (1) número de cuatro (4) dígitos imprimirlo por separado en unidades,
#decenas, centenas y unidades de mil.
#Entrada:
#1234
#Salida:
#Unidades: 4
#Decenas: 3
#Centenas: 2
#Unidades de mil: 1
    def ejercicio11 (self):
        print("\n")
        num = int(input("Ingrese un número de (4) dígitos: \n"))
        n = str(num)
        print("Entrada:\n", num)
        print("Salida:")
        print("Unidades {}".format(n[3]))
        print("Decenas {}".format(n[2]))
        print("Centenas {}".format(n[1]))
        print("Unidades de mil {}".format(n[0]))

#Estructuras De Control de Flujo de Datos

# Todos los años que se dividen exactamente entre 400, o que son divisibles exactamente 
#entre 4 y no son divisibles exactamente entre 100 son años bisiestos.
#Usando estas premisas crea un algoritmo que lea una fecha como un número
#entero con el formato ddmmaaaa, y luego extraiga el año de la fecha indicando si
#el mismo es un año bisiesto o no.
    def ejercicio1fd (self):
        print("\n")
        print("\tEstructuras de Control de Flujo de Datos")
        print("\n")
        fecha = int(input("Fecha en formato DDMMAAAA:"))
        año = fecha % 10000
        dia = fecha // 1000000
        mes = (fecha // 10000) % 100
        
        if año % 4 != 0:
            print("El año",año,"no es bisiesto")
        elif año % 4 == 0 and año % 100 != 0:
            print("El año",año, "es bisiesto")

#Dado un número entero cuya cantidad de dígitos es igual a 5, determine si es capicúa.
#Nota: un número capicúa es aquel que se lee igual hacia adelante que hacia atrás 
    def ejercicio2fd (self):
        print("\n")
        num = int(input('Ingresa el valor de un número: '))
        if num > 9999 and num <= 99999:
            mil = num // 10000
            unidades = num % 10
            if mil == unidades:
                print("Es número capicúa")
            else:
                print("No es un número capicúa")
        else:
            print("No es un número con cinco dígitos")

#Cree un algoritmo que tome por entrada las horas y minutos de un día y dé como
#resultado su equivalente en segundos.
    def ejercicio3fd (self):
        print("\n")
        horas = int(input("Ingrese las horas:"))
        minutos = int(input("Ingrese los minutos:"))
        s1 = horas * 3600
        s2 = minutos * 60
        segundos = s1 + s2
        print("En total hay", segundos, "segundos")

#Para un valor entero positivo que representa una cantidad en segundos, indicar
#su equivalente en minutos, horas y días.
    def ejercicio4fd (self):
        print("\n")
        segundos = int(input("Ingrese los segundos:"))
        dia = segundos // 86400
        resto1 = segundos % 86400
        horas = resto1 // 3600
        resto2 = resto1 % 3600
        minutos = resto2 // 60
        resto3 = resto2 % 60
        print("Son", dia, "dia(s),", horas, "horas,",minutos, "minutos",resto3, "segundos en total")     

#Dados tres números enteros positivos A, B y C, determine ¿cuál de ellos es el
#mayor? y ¿cuál es el segundo mayor?
    def ejercicio5fd (self):
        print("\n")
        print("Ingrese tres números enteros positivos")
        A = int(input("A: "))
        B = int(input("B: "))
        C = int(input("C: "))
        
        if A > B and A > C:
            print(A, "es el número mayor")
            if B > C:
                print (B, "es el segundo número mayor")
            else:
                print(C, "es el segundo número mayor")
        elif B > A and B > C:
            print(B, "es el número mayor")
            if A > C:
                print (A,"es el segundo número mayor")
            else:
                print(C,"es el segundo número mayor")
        elif C > A and C > B:
            print(C, "es el número mayor")
            if A > B:
                print (A, "es el segundo número mayor")
            else:
                print (B, "es el segundo número mayor")
        else:
            print ("No se puede determinar")

#En un estacionamiento el monto a pagar se calcula multiplicando el número de horas que permaneció el 
# automóvil dentro Del estacionamiento por Bs. 4 y se incrementa esta cantidad en Bs. 2,50 por cada media 
# hora adicional. Ahora se desea que usted elabore un algoritmo que a partir de la hora de entrada y la hora
# de salida de un vehículo (las mismas corresponden a un mismo día) calcule el monto a pagar por el dueño del
# vehículo. La entrada vendrá dada por dos enteros positivos el primero representa las horas y el segundo los 
# minutos, además por último se debe leer un carácter (A o P) que indica si la hora es AM o PM.
    def ejercicio6fd (self):
        print("\n")
        tiempo = [0, 0, "", 0, 0, ""]
        tiempos = [0]*2
        horas = ["Su hora de ingreso al estacionamiento es: ", "Los minutos excedentes de entrada", 2, "Hora de partida del estacionamiento", "Los minutos excedentes de salida", 5]
        ct = 0

        for i in horas:
            if (ct != 2 or ct != 5):
                if (i != 2 and i != 5):
                    tiempo[ct] = int(input("Ingrese {}: ".format(i)))
                ct += 1
            if ct == 2 or ct == 5:
                horario = input("La hora que ingresada, ¿Es A.M o P.M? ")
                tiempo[(horas[ct])] = horario

        tiempos[0] = (tiempo[0] * 3600) + (tiempo[1] * 60)
        tiempos[1] = (tiempo[3] * 3600) + (tiempo[4] * 60)

        if tiempo[2] == tiempo[5]:
            nhp = tiempos[1] - tiempos[0]
        else:
            nhp = (43200 - tiempos[0]) + tiempos[1]

        tiempos[0] = (nhp-(nhp % 3600)) / 3600
        tiempos[1] = (nhp%3600)/60
        print(tiempos)
        pagar = tiempos[0] * 4

        if tiempos[1] >= 30:
            pagar = pagar + 2.50
        print("El dueño del vehículo deberá cancelar",pagar, "dolares")

#El IMC resulta de la división de la masa del individuo (en kilogramos) entre el
#cuadrado de la estatura (en metros). El índice de masa corporal es un indicador
#del peso de una persona en relación con su altura.
#Clasificación del IMC de acuerdo con la OMS de la ONU:
#a. Menor a 16: Criterio de ingreso.
#b. 16 a 16.9: infra peso.
#c. 17 a 18.4: bajo peso.
#d. 18.5 a 24.9: peso normal.
#e. 25 a 29.9: sobrepeso.
#f. 30 a 34.9: obesidad pre-mórbida.
#g. 40 a 45: obesidad mórbida.
#h. Mayor a 45: obesidad híper-mórbida.
#Dado el peso de una persona en libras (1 libra = 0,453592 Kg) y su estatura en
#centímetros, calcule su IMC e indique como salida el peso en kilogramos, el valor
#de IMC de la persona y la categoría en la cual fue clasificado."""    
    def ejercicio7fd (self):
        print("\n")
        peso = int(input("Ingrese el peso de la persona en libras: "))
        estatura = int(input("Ingrese la estatura en centímetros: "))
        kg = peso / (2.205)
        metro = estatura / 100
        imc = kg / (metro*metro)
        print("El IMC es de",imc)
        if (imc < 16):
            print("Criterio de ingreso")
        else:
            if (17 > imc >= 16):
                print("Infra peso")
            else:
                if(18.4 >= imc >= 17 ):
                    print ("Baja peso")
                else:
                    if(25 > imc >= 18.5):
                        print("Peso normal")
                    else:
                        if(30 > imc >= 25):
                            print("Sobrepeso")
                        else:
                            if ( 35 >  imc >= 30):
                                print("Obesidad pre-mórbida")
                            else:
                                if (40 >= imc >= 45):
                                    print("Obesidad mórbida")
                                else:
                                    if(imc > 45):
                                        print("Obesidad hiper-mórbida")

#Escriba un algoritmo que reciba una fecha (día y mes) correspondiente al año
#2014 e imprima por pantalla el número de días que han pasado desde el 1 de
#Enero de 2014 hasta la fecha dada
    def ejercicio8fd (self):
        print("\n")
        from datetime import date
        dia = int(input("Ingrese el día: "))
        mes = int(input("Ingrese el mes: "))
        fecha1 = date(2014, 1, 1)
        fecha2 = date(2014, mes, dia)
        dias = fecha2 - fecha1
        print("Los días transcurridos desde el 1 de enero del 2014 hasta el dia", dia, "del", mes, "mes del 2014 son: ", dias.days)

#Solicitar un número entre el 1 y el 12 e imprimir el mes correspondiente a dicho número.
    def ejercicio9fd (self):
        print("\n")
        número = int(input("Ingrese un número entre el 1 y el 12: "))
        if número == 1:
            print("Enero")
        elif número == 2:
            print("Febrero")
        elif número == 3:
            print("Marzo")
        elif número == 4:
            print("Abril")
        elif número == 5:
            print("Mayo")
        elif número == 6:
            print("Junio")
        elif número == 7:
            print("Julio")
        elif número == 8:
            print("Agosto")
        elif número == 9:
            print("Septiembre")
        elif número == 10:
            print("Octubre")
        elif número == 11:
            print("Noviembre")
        elif número == 12:
            print("Diciembre")
        else:
            print("No existe mes con ese número")

#En un almacén se hace un 20% de descuento a los clientes cuya compra supere
#los Bs 1000, se desea que realice un algoritmo el cual tome por entrada el monto a
#pagar por el cliente y arroje como salida el monto aplicando el descuento de ser
#necesario.
    def ejercicio10fd (self):
        print("\n")
        monto = int(input("Ingrese el monto a cancelar para verificar si obtiene el descuento: "))
        if monto > 1000:
            descuento1 = 20 / 100
            descuento2 = monto * descuento1
            valorapagar = monto - descuento2
            print ("El monto a cancelar es: ", valorapagar)
            print("Nota: incluido descuento de 20%")
        else:
            print("El monto a cancelar es:", monto)
            print("Nota: El monto a cancelar no incluye descuento")

#Estructuras iterativas 

#Dado un número entero N, calcular e informar al usuario cuántos dígitos tiene dicho número
    def ejercicio1ei (self):
        print("\n")
        print("\tEstructuras iterativas")
        print("\n")
        num = int(input("Ingrese un número: "))
        contador = len(str(num))
        print("El numero ingresado tiene %s digitos" % (contador))

#Dado un número, determine si es capicúa.
#Nota: un número capicúa es aquel que se lee igual hacia adelante que hacia atrás. 
    def ejercicio2ei (self):
        print("\n")
        num = int(input('Ingresa el valor de un número: '))
        if str(num) == str(num)[::-1]:
            print("Si es capicúa")
        else:
            print("No es capicúa")

#Dado un número N determinar si es un número primo.
#Nota: Un número primo es aquel que solo es divisible por 1(uno) y por el mismo. 
    def ejercicio3ei (self):
        print("\n")
        num = int(input("Ingresa un número: "))
        x = 1
        cont = 0
        while x <= num:
            if num % x == 0:
                cont = cont +1
            x = x + 1
        if cont == 2:
            print ("Es un número primo")
        else:
            print ("No es un número primo")

#Construya un programa que dado un valor entero N, haga el cálculo de la función
#factorial utilizando estructuras iterativas.
    def ejercicio4ei (self):
        print("\n")
        num = int(input('Ingresa un número: '))
        factorial = 1
        if num!=0:
            for i in range(1, num + 1):
                factorial = factorial*i
        print("El factorial es:", factorial)

#Dado un número entero N que representa una contraseña y asumiendo que una
#contraseña debe tener al menos 10 dígitos para ser segura, determine si la
#contraseña ingresada por el usuario es correcta, de no serlo debe pedirla
#nuevamente hasta que tenga los 10 (diez) dígitos solicitados y al ser correcta
#mostrar un mensaje de éxito al usuario, por salida estándar.
    def ejercicio5ei (self):
        print("\n")
        contraseña = int(input("Ingresar una contraseña de 10 digitos:"))
        m = 0
        while contraseña > 0:
            contraseña //= 10
            m = m + 1
        if m == 10:
            print("la contraseña es correcta")
        else:
            print("La contraseña es incorrecta")

#Dada una secuencia de números terminada en cero (0), elaborar un algoritmo que
#informe al usuario qué valor tiene el número mayor y qué valor tiene el número
#menor, sin contar el cero (0).
    def ejercicio6ei(self):
        print("\n")
        may = 0
        men = 0
        i = 1
        ntotal = int (input("Ingrese la cantidad de números: "))
        while i <= ntotal:
            ntemp = int (input("Ingrese el número, nota: ingresa cero para terminar: "))
            if i == 1:
                may = ntemp
                men = ntemp
            else:
                if ntemp > may:
                    may = ntemp
                if ntemp < men and ntemp != 0:
                    men = ntemp
            i = i + 1
        print("El número mayor es", may)
        print("El número menor es", men)

#Se tiene una secuencia de enteros terminada en cero, que corresponde a la edad,
#peso y estatura de una muestra de hombres y mujeres mayores de 18 años. Con
#base en dicha secuencia se desea realizar un estudio a fin de conocer:
#Edad promedio de todas las personas en la muestra.
#Peso promedio de todas las personas en la muestra.
#Estatura promedio de todas las personas en la muestra.
#Cuántas personas hay con edad entre los 18 y 25 años.
#Cuántas personas son mayores a 36 años.
#Cuál es el promedio de peso de las personas con edades entre 18 y 35 años.
    def ejercicio7ei(self):
        print("\n")
        edad=[20,30,40,50,60,70]
        peso=[40,50,60,70,80,90]
        estatura=[1.40,1.50,1.60,1.70,1.80,1.90]
        prom_edad=(sum(edad))/len(edad)
        prom_peso=(sum(peso))/len(peso)
        prom_estatura=(sum(estatura))/len(estatura)
        c=0
        x=0
        while c < 8:
            x+=(edad.count(20+c))
            c+=1  
        c=1
        cal=0  
        while c<150:
            cal+=(edad.count(40+c))
            c+=1
        c=0
        contPos=0
        while c<36:
            contPos=[i for i,x in enumerate(edad) if x>=18 and x<=35]
            c+=1
        suma=0
        c=0
        while c<len(contPos):
            suma+=peso[contPos[0+c]]
            c+=1
        print(contPos)
        print(f"El promedio de edades de todas las personas es de: {prom_edad:.2f}")
        print(f"El promedio de peso de todas las personas es de: {prom_peso:.2f}")
        print(f"El promedio de estatura de todas las personas es de: {prom_estatura:.2f}")
        print(f"Hay {x}, persona(s) con edad de entre [18-25] ")
        print(f"Hay {cal}, personas mayor(es) a 36 años")
        print(f"El promedio de peso entre las personas de 18 a 35 años es: {suma/len(contPos):.2f}")

#Construye un algoritmo que calcule e imprima la tabla de multiplicar, desde la tabla
#del 1 hasta la del 10.
    def ejercicio8ei (self):
        print("\n")
        num = int(input("Introduzca el número de la tabla que desee: "))
        for i in range(0,11):
            resul = i * num
            print(num, "x", i, "=", resul)
        
#Escribir un algoritmo que muestre todas las fichas de dominó, sin repetir. 
    def ejercicio9ei (self):
        print("\n")
        print("Desea mostrar las fichas deL domino? ")
        desea = input("Seleccione S (Si) o N (No): ")
        if desea == "S":
            for i in range(1, 7):
                for j in range(i, 7):
                    print("{}:{}".format(i, j))
        else:
            print("No se moestrará las fichas del domino")

#Dados N número positivos (N>1) calcular el promedio de esta serie. Considere que
#la serie termina al leer un 0.
    def ejercicio10ei (self):
        print("\n")
        contador = 0
        suma = 0
        num = int(input("Ingrese un número: "))
        while num > 1:
            num = int(input('Ingrese un número entero (0 para terminar): '))
            suma += num
            contador += 1
            if contador == 0:
                print('No ingreso ningun número: ')
            else:
                promedio = suma / contador
        print('El promedio de los {} numeros es igual a {}.'.format(contador, promedio))

#Procedimientos (Acciones y Funciones)
 
#Construya una función que solicite edades al usuario y determine el promedio de
#las edades mayores a 18 años. El usuario indicará cuando desea dejar de
#suministrar datos de entrada. En la Acción Principal se informará el promedio calculado
    def ejercicio1ayf (self):
        print("\n")
        print("\tProcedimientos (Acciones y Funciones)")
        print("\n")
        acumulador = 0
        nedad = int(input("Ingrese cuantas edades se ingresará: "))
        for i in range(nedad):
            edad = int(input("Ingrese la edad, nota: las edades deben ser mayores a 18: "))
            acumulador = acumulador + edad
            if edad >= 18:
                promedio = acumulador / nedad
        print("El promedio de las edades es de", promedio)

#Construya una función “Eleva” Que reciba como parámetros una base y un
#exponente y retorne al algoritmo principal el resultado de elevar un numero al otro.
    def ejercicio2ayf (self):
        print("\n")
        base = int(input("Ingrese la base: "))
        expo = int(input("Ingrese el exponente: "))
        pote = base ** expo
        print(str(base) + "^" + str(expo) + " es igual a: ", pote)

#Escriba una función que calcule el perímetro del pentágono (siendo el perímetro la
#suma de los lados del polígono).
    def ejercicio3ayf (self):
        print("\n")
        print("¿De que tipo de pentagono quiere calcular el perímetro?")
        penta = int(input("Regular o irregular? /n Nota: Regular es 1 e Irregular es 0: "))
        if penta == 1:
            lado = int(input("Ingrese el valor de los lados del pentágono: "))
            perimetro = lado * 5
            print(str(lado) + "+" + str(lado) + "+" + str(lado) + "+" + str(lado) + "+" + str(lado) + " es igual a:", perimetro)
        else:
            lado1 = int(input("Ingrese el valor del primer lado del pentágono: "))
            lado2 = int(input("Ingrese el valor del segundo lado del pentágono: "))
            lado3 = int(input("Ingrese el valor del tercer lado del pentágono: "))
            lado4 = int(input("Ingrese el valor del cuarto lado del pentágono: "))
            lado5 = int(input("Ingrese el valor del quinto lado del pentágono: "))
            perimetro = lado1 + lado2 + lado3 + lado4 + lado5
            print("El perímetro del pentágono es", perimetro)

#En una empresa pagan según las horas trabajadas y una tarifa fija por hora. Si la
#cantidad de horas trabajadas en una semana es mayor a 40, la tarifa se
#incrementa en un 35% para las horas extras. Escribe una acción principal que
#solicite la identificación de 5 empleados, el monto cancelado por hora, y la
#cantidad de horas trabajadas por cada uno, llame a acciones/funciones que
#calculen el salario semanal por horas trabajadas (<=40) y los ingresos por
#concepto de horas extras, y finalmente informe los resultados en la acción
#principal.
    def ejercicio4ayf (self):
        print("\n")
        empleados = int(input("¿Cuántos empleados se identificaran? "))
        for i in range(empleados):
            print("\n")
            name = input("Identifiquese con sus nombres y apellidos: ")
            pagohora = int(input("Ingrese el valor cancelado por hora: "))
            horastrabajadas = int(input("Ingrese la cantidad de horas trabajadas: "))
            extrahoras = int(input("Ingrese la cantidad de horas extras trabajadas: "))
            if horastrabajadas > 40:
                tarifaextra = pagohora * (35 / 100)
                valorextra = extrahoras * tarifaextra
                print("La cantidad ganada por las horas extras es", valorextra)
                salariosemanal = pagohora * (horastrabajadas - extrahoras)
                print("El salario semanal es de", salariosemanal)
                valorfinal = salariosemanal + valorextra
                print("El valor final a cancelar por horas extras de", name ,"es de", valorfinal)
            else:
                salariosemanal = pagohora * (horastrabajadas - extrahoras)
                print("El salario semanal y final de" , name, "es de", salariosemanal)

#Escriba una acción (MillasAKilometros) que convierta una distancia en millas a
#kilómetros (1milla = 1.60935km). Esta acción recibirá como parámetros: el nombre
#de la ciudad origen, el nombre de la ciudad destino y la distancia en millas entre
#ellas y debe retornar la distancia entre las ciudades en kilómetros.
#Desarrolle además una acción principal en donde utilice a la acción
#MillasAKilometros para convertir e informar la distancia en kilómetros entre 4 pares
#de ciudades suministradas por el usuario.
#Entrada:
#Cuidad A
#Ciudad B
#332
#Salida:
#Entre la Ciudad A y la Ciudad B hay 534.30 Km
    def ejercicio5ayf (self):
        print("\n")
        acumulador = 0
        for i in range (4):
            ciudada = input("Ingrese el nombre de la ciudad de origen: ")
            ciudadb = input("Ingrese el nombre de la ciudad de destino: ")
            distancia = int(input("Ingrese la distancia en millas que hay entre las dos ciudades: "))
            km = distancia * (1.60935)
            print("La distancia en km que hay entre", ciudada, "y", ciudadb, "es de", km, "km")
            acumulador = acumulador + km
        print("La suma de distancia entre los 4 pares de ciudades es", acumulador)

Ejerciciospropuestos = Ejercicios("Ejerciciospropuestos")
Ejerciciospropuestos.ejercicio1()
Ejerciciospropuestos.ejercicio2()
Ejerciciospropuestos.ejercicio4()
Ejerciciospropuestos.ejercicio5()
Ejerciciospropuestos.ejercicio6()
Ejerciciospropuestos.ejercicio7()
Ejerciciospropuestos.ejercicio9()
Ejerciciospropuestos.ejercicio10()
Ejerciciospropuestos.ejercicio11()
Ejerciciospropuestos.ejercicio1fd()
Ejerciciospropuestos.ejercicio2fd()
Ejerciciospropuestos.ejercicio3fd()
Ejerciciospropuestos.ejercicio4fd()
Ejerciciospropuestos.ejercicio5fd()
Ejerciciospropuestos.ejercicio6fd()
Ejerciciospropuestos.ejercicio7fd()
Ejerciciospropuestos.ejercicio8fd()
Ejerciciospropuestos.ejercicio9fd()
Ejerciciospropuestos.ejercicio10fd()
Ejerciciospropuestos.ejercicio1ei()
Ejerciciospropuestos.ejercicio2ei()
Ejerciciospropuestos.ejercicio3ei()
Ejerciciospropuestos.ejercicio4ei()
Ejerciciospropuestos.ejercicio5ei()
Ejerciciospropuestos.ejercicio6ei()
Ejerciciospropuestos.ejercicio7ei()
Ejerciciospropuestos.ejercicio8ei()
Ejerciciospropuestos.ejercicio9ei()
Ejerciciospropuestos.ejercicio10ei()
Ejerciciospropuestos.ejercicio1ayf()
Ejerciciospropuestos.ejercicio2ayf()
Ejerciciospropuestos.ejercicio3ayf()
Ejerciciospropuestos.ejercicio4ayf()
Ejerciciospropuestos.ejercicio5ayf()